/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm_right: hm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            require-prior-idle-ms = <125>;
            hold-trigger-key-positions = <51 39 27 15 14 26 38 50 68 4 3 13 25 37 67 49 48 66 36 24 12 2 1 11 35 65 47 23 22 10 0 34 64 46 52 53 54 70 69 70 71 55 57 56 73 72 74>;
            quick-tap-ms = <150>;
        };

        hm_left: hm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            require-prior-idle-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <58 75 59 76 61 77 60 42 43 41 40 28 29 30 31 19 18 16 17 6 5 7 9 8 32 20 21 33 45 44 62 63 79 78 52 53 54 70 71 69 57 74 73 72 55 56>;
            quick-tap-ms = <150>;
        };

        hrm_index_right: hrm_index_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_INDEX_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "balanced";
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <51 39 27 15 14 26 38 50 68 4 3 13 25 37 67 49 48 66 36 24 12 2 1 11 35 65 47 23 22 10 0 34 64 46 52 53 54 71 70 69 55 56 57 74 73 72>;
            quick-tap-ms = <300>;
        };

        hrm_index_left: hrm_index_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_INDEX_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <58 75 59 76 61 77 60 42 43 41 40 28 29 30 31 19 18 16 17 6 5 7 9 8 32 20 21 33 45 44 62 63 79 78 55 56 57 74 73 72 53 54 71 69 70 52>;
            quick-tap-ms = <300>;
        };

        hrm_middle_right: hrm_middle_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_MIDDLE_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <51 39 27 15 14 26 38 50 68 4 3 13 25 37 67 49 48 66 36 24 12 2 1 11 35 65 47 23 22 10 0 34 64 46 52 53 54 71 70 69 55 56 57 74 72 73>;
            quick-tap-ms = <300>;
        };

        hrm_middle_left: hrm_middle_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_MIDDLE_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <210>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <58 75 59 76 61 77 60 42 43 41 40 28 29 30 31 19 18 16 17 6 5 7 9 8 32 20 21 33 45 44 62 63 79 78 56 74 73 72 55 57 52 69 53 70 71 54>;
            quick-tap-ms = <300>;
        };

        hrm_ring_right: hrm_ring_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RING_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <51 39 27 15 14 26 38 50 68 4 3 13 25 37 67 49 48 66 36 24 12 2 1 11 35 65 47 23 22 10 0 34 64 46 52 53 54 71 70 69 55 56 57 74 73 72>;
            quick-tap-ms = <300>;
        };

        hrm_ring_left: hrm_ring_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RING_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <58 75 59 76 61 77 60 42 43 41 40 28 29 30 31 19 18 16 17 6 5 7 9 8 32 20 21 33 45 44 62 63 79 78 72 73 74 55 56 57 52 54 53 70 71 69>;
            quick-tap-ms = <300>;
        };

        hrm_pinky_right: hrm_pinky_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_PINKY_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <51 39 27 15 14 26 38 50 68 4 3 13 25 37 67 49 48 66 36 24 12 2 1 11 35 65 47 23 22 10 0 34 64 46 71 54 53 70 52 69 74 57 73 56 55 72>;
            quick-tap-ms = <300>;
        };

        hrm_pinky_left: hrm_pinky_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_PINKY_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <260>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <58 75 59 76 61 77 60 42 43 41 40 28 29 30 31 19 18 16 17 6 5 7 9 8 32 20 21 33 45 44 62 63 79 78 73 72 55 57 56 74 71 54 53 70 52 69>;
            quick-tap-ms = <300>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        super_tab: super_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_GUI &kp TAB>, <&macro_press>;

            label = "SUPER_TAB";
            tap-ms = <100>;
        };

        super_shift_tab: super_shift_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_GUI &kp LEFT_SHIFT &kp TAB>, <&macro_press>;

            label = "SUPER_SHIFT_TAB";
            tap-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1          &kp F2                      &kp F3                     &kp F4                    &kp F5                                                                                                                          &kp F6                          &kp F7                     &kp F8                  &kp F9                               &none
&kp EQUAL       &kp N1                      &kp N2                     &kp N3                    &kp N4                    &kp N5                                                                                        &kp N6  &kp N7                          &kp N8                     &kp N9                  &kp N0                               &kp MINUS
&kp TAB         &kp Q                       &kp W                      &kp E                     &kp R                     &kp T                                                                                         &kp Y   &kp U                           &kp I                      &kp O                   &kp P                                &kp BSLH
&kp TAB         &hrm_pinky_left LEFT_ALT A  &hrm_ring_left LEFT_GUI S  &hrm_middle_left LCTRL D  &hrm_index_left LSHIFT F  &kp G                                                                                         &kp H   &hrm_index_right RIGHT_SHIFT J  &hrm_middle_right RCTRL K  &hrm_ring_right LCMD L  &hrm_pinky_right LEFT_ALT SEMICOLON  &kp SQT
&kp LEFT_SHIFT  &kp Z                       &kp X                      &kp C                     &kp V                     &kp B   &kp LEFT_CONTROL  &kp LEFT_ALT  &kp HOME  &kp PAGE_UP    &kp LCMD  &kp RIGHT_CONTROL  &kp N   &kp M                           &kp COMMA                  &kp DOT                 &kp FSLH                             &kp RIGHT_SHIFT
&magic MAGIC 0  &kp GRAVE                   &kp ESCAPE                 &kp LEFT                  &kp RIGHT                         &kp BSPC          &kp DEL       &kp END   &kp PAGE_DOWN  &kp RET   &kp SPACE                  &kp UP                          &kp DOWN                   &kp LBKT                &kp RBKT                             &layer_td
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &kp PAUSE_BREAK  &kp F10
&trans        &none         &none       &none       &none      &kp HOME                                                                  &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                                   &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                                 &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &kp N0      &kp F11     &kp F12    &kp PG_DN  &trans        &trans      &to DEFAULT  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &kp CAPSLOCK  &kp INSERT  &trans       &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans               &trans                 &trans           &trans                                                                                   &trans  &trans  &trans  &trans  &trans
&trans  &trans               &trans                 &trans           &trans             &trans                                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LC(RS(PAGE_UP))  &kp LC(LS(PAGE_DOWN))  &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp TAB                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp HOME             &kp LC(LEFT)           &kp LC(RIGHT)    &kp END            &kp ESCAPE                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans               &trans                 &trans           &kp LG(S)          &kp NUMBER_0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans               &trans                 &trans           &trans                           &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
